name: Benchmark

on:
  pull_request:
    types: [opened, synchronize, labeled]
    branches:
      - main

  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to run benchmark on"
        required: true
        default: "main"

jobs:
  benchmark:
    name: Macro Benchmarks
    if: contains(github.event.pull_request.labels.*.name, 'ci:benchmark')
    runs-on: benchmarking-runner
    permissions:
      pull-requests: write
      contents: write
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Install Stable Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache Rust Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Cargo Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Run Tailcall
        run: |
          ./target/release/tailcall start ci-benchmark/benchmark.graphql&

      - name: Install Nginx
        run: |
          sudo apt-get update
          sudo apt-get install -y nginx

      - name: Clean Up
        run: |
          sudo rm -rf /etc/nginx/sites-enabled/default

      - name: Copy Nginx Configuration
        working-directory: ci-benchmark
        run: |
          sudo cp nginx.conf /etc/nginx/

      - name: Test Nginx Configuration
        run: |
          sudo nginx -t

      - name: Start Nginx
        run: |
          sudo systemctl start nginx

      - name: Install Wrk
        run: |
          sudo apt-get install -y wrk

      - name: Run Test Query
        run: |
          curl -i -X POST -d '{"query": "{posts{title}}"}' http://localhost:8000/graphql -H "Content-Type: application/json"

      - id: run_wrk
        name: Run Wrk
        working-directory: ci-benchmark
        run: |
          wrk -d 30 -t 1 -c 100 -s wrk.lua http://localhost:8000/graphql > wrk-output.txt

      - id: convert_wrk_output_markdown
        name: Convert Output to Markdown
        working-directory: ci-benchmark
        run: |
          node wrk-output-to-md.js wrk-output.txt > wrk-output.md

      - id: cat_md
        name: Cat Markdown
        working-directory: ci-benchmark
        run: |
          cat wrk-output.md

      - id: get_comment_body
        name: Get Comment Body
        working-directory: ci-benchmark
        run: |
          body="$(cat wrk-output.md)"
          delimiter="$(openssl rand -hex 8)"
          echo "body<<$delimiter" >> $GITHUB_OUTPUT
          echo "$body" >> $GITHUB_OUTPUT
          echo "$delimiter" >> $GITHUB_OUTPUT

      - name: Create Commit Comment
        uses: peter-evans/commit-comment@v3
        with:
          sha: ${{github.event.pull_request.head.sha}}
          body: ${{steps.get_comment_body.outputs.body}}

  lint:
    name: CI:Lint
    if: contains(github.event.pull_request.labels.*.name, 'ci:lint')
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
      - name: Install Prettier
        run: npm install --global prettier
      - name: Install Stable Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt, clippy
      - name: Cache Rust Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions/checkout@v4
      - name: Run lint script
        run: ./lint.sh --mode=fix
      - name: Commit and push if changed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "style: apply lint fixes"

  Micro-benchmarks:
    name: Criterion Benchmarks
    if: contains(github.event.pull_request.labels.*.name, 'benchmark')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Critcmp
        run: cargo install critcmp

      - name: Benchmark changes
        run: |
          cargo bench --bench impl_path_string_for_evaluation_context -- --save-baseline new_branch
          cargo bench --bench data_loader_bench -- --save-baseline new_branch
          cargo bench --bench request_template_bench -- --save-baseline new_branch
          cargo bench --bench json_like_bench -- --save-baseline new_branch

      - name: Fetch base branch
        run: git fetch

      - name: Checkout base branch
        run: git checkout ${{ github.base_ref }}

      - name: Benchmark base
        run: |
          cargo bench --bench impl_path_string_for_evaluation_context -- --save-baseline main_branch
          cargo bench --bench data_loader_bench -- --save-baseline main_branch
          cargo bench --bench request_template_bench -- --save-baseline main_branch
          cargo bench --bench json_like_bench -- --save-baseline main_branch

      - name: Run shell script
        run: |
          critcmp main_branch new_branch | awk 'NR>2 {
           item = $1
           before = $7
           after = $3
           before_val = ($7 ~ /ns/) ? $7 : ($7 ~ /µs/) ? $7 * 1000 : ($7 ~ /ms/) ? $7 * 1000000 : "invalid"
           after_val = ($3 ~ /ns/) ? $3 : ($3 ~ /µs/) ? $3 * 1000 : ($3 ~ /ms/) ? $3 * 1000000 : "invalid"
           temp1 = before_val
           temp2 = after_val
           if (before_val != "invalid" && after_val != "invalid") {
               change = ((after_val - before_val) / before_val) * 100
               gsub("%", "", change)  # Remove '%' symbol
               printf "| %-30s | %-20s | %-20s | %-10.2f |\n", item, before, after, change >> "output_file.txt"
               if (change > 10) {
                   echo "Percentage change exceeds 10%. Failing the workflow."
                   exit 1
               }
           }
           else {
               echo "Invalid units detected for %s. Failing the workflow."
               exit 1
           }
          }'

      - name: Debug Info
        run: |
          echo "Owner: ${{ github.repository_owner }}"
          echo "Repo: ${{ github.repository }}"
          echo "Issue Number: ${{ github.event.number }}"

      - name: Comment PR
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const fileContent = fs.readFileSync('output_file.txt', 'utf8');
            const issue_number = context.issue.number;
            const comment = `
            <details>
            <summary>Benchmark Results</summary>

            | Test                          | Base         | PR               | % change   |
            |-------------------------------|--------------|------------------|------------|
            ${fileContent}

            </details>
            `;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: comment
            });

  Build_time_compare:
    name: iai_callgrind_benchmarks
    if: contains(github.event.pull_request.labels.*.name, 'benchmark')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install iai-callgrind-runner
        run: cargo install --version 0.7.3 iai-callgrind-runner

      - name: Install Valgrind
        run: sudo apt-get update && sudo apt-get install valgrind

      - name: Execute build_time_compare.sh
        run: |
          chmod +x .github/scripts/compare_build_time.sh
          bash .github/scripts/compare_build_time.sh
