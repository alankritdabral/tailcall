name: Benchmark

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, labeled]
    branches:
      - main

  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to run benchmark on"
        required: true
        default: "main"

jobs:
  benchmark:
    name: Macro Benchmarks
    if: contains(github.event.pull_request.labels.*.name, 'ci:benchmark') || github.event_name == 'push'
    runs-on: benchmarking-runner
    permissions:
      pull-requests: write
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Install Stable Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache Rust Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Cargo Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Run Tailcall
        run: |
          ./target/release/tailcall start ci-benchmark/benchmark.graphql --log-level error &

      - name: Install Nginx
        run: |
          sudo apt-get update
          sudo apt-get install -y nginx

      - name: Clean Up
        run: |
          sudo rm -rf /etc/nginx/sites-enabled/default

      - name: Copy Nginx Configuration
        working-directory: ci-benchmark
        run: |
          sudo cp nginx.conf /etc/nginx/

      - name: Test Nginx Configuration
        run: |
          sudo nginx -t

      - name: Start Nginx
        run: |
          sudo systemctl start nginx

      - name: Install Wrk
        run: |
          sudo apt-get install -y wrk

      - name: Run Test Query
        run: |
          curl -i -X POST -d '{"query": "{posts{title}}"}' http://localhost:8000/graphql -H "Content-Type: application/json"

      - name: Warmup Wrk
        working-directory: ci-benchmark
        run: |
          wrk -d 10 -t 4 -c 100 -s wrk.lua http://localhost:8000/graphql

      - id: run_wrk
        name: Run Wrk
        working-directory: ci-benchmark
        run: |
          wrk -d 30 -t 4 -c 100 -s wrk.lua http://localhost:8000/graphql > wrk-output.txt

      - id: convert_wrk_output_markdown
        name: Convert Output to Markdown
        working-directory: ci-benchmark
        run: |
          node wrk-output-to-md.js wrk-output.txt > wrk-output.md

      - id: cat_md
        name: Cat Markdown
        working-directory: ci-benchmark
        run: |
          cat wrk-output.md

      - id: get_comment_body
        name: Get Comment Body
        working-directory: ci-benchmark
        run: |
          body="$(cat wrk-output.md)"
          delimiter="$(openssl rand -hex 8)"
          echo "body<<$delimiter" >> $GITHUB_OUTPUT
          echo "$body" >> $GITHUB_OUTPUT
          echo "$delimiter" >> $GITHUB_OUTPUT

      - name: Create Commit Comment
        uses: peter-evans/commit-comment@v3
        with:
          sha: ${{github.event.pull_request.head.sha}}
          body: ${{steps.get_comment_body.outputs.body}}

  lint:
    name: CI:Lint
    if: contains(github.event.pull_request.labels.*.name, 'ci:lint')
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
      - name: Install Prettier
        run: npm install --global prettier
      - name: Install Stable Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt, clippy
      - name: Cache Rust Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions/checkout@v4
      - name: Run lint script
        run: ./lint.sh --mode=fix
      - name: Commit and push if changed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "style: apply lint fixes"

  Criterion:
    name: Criterion Benchmarks
    if: contains(github.event.pull_request.labels.*.name, 'benchmark')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Critcmp
        run: cargo install critcmp

      - name: Run Criterion on branch
        run: |
          cargo bench --features criterion -- --save-baseline new_branch

      - name: Switch to main
        run: |
          git fetch
          git checkout $BASE_BRANCH

      - name: Run Criterion on main
        run: |
          cargo bench --features criterion -- --save-baseline main_branch

      - name: Execute check_degradation.sh
        run: |
          echo -n > benches/critcmp.txt && > table_output.txt
          bash .github/scripts/check_degradation.sh > table_output.txt && cat table_output.txt

      - id: get_comment_body
        name: Get Comment Body
        run: |
          body="$(cat table_output.txt)"
          delimiter="$(openssl rand -hex 8)"
          echo "body<<$delimiter" >> $GITHUB_OUTPUT
          echo "$body" >> $GITHUB_OUTPUT     
          echo "$delimiter" >> $GITHUB_OUTPUT

      - name: Create Commit Comment
        uses: peter-evans/commit-comment@v3
        with:
          sha: ${{github.event.pull_request.head.sha}}
          body: ${{steps.get_comment_body.outputs.body}}

  Iai_callgrind:
    name: iai_callgrind_benchmarks
    if: contains(github.event.pull_request.labels.*.name, 'benchmark')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install iai-callgrind-runner
        run: cargo install --version 0.7.3 iai-callgrind-runner

      - name: Install Valgrind
        run: sudo apt-get update && sudo apt-get install valgrind

      - name: Run Criterion on branch
        run: |
          echo -n > benches/iai-callgrind/new_benchmark.txt
          cargo bench --features iai-callgrind > "benches/iai-callgrind/new_benchmark.txt"

      - name: Switch to main
        run: |
          git fetch
          git checkout $BASE_BRANCH

      - name: Run Criterion on main
        run: |
          echo -n > benches/iai-callgrind/old_benchmark.txt
          cargo bench --features iai-callgrind > "benches/iai-callgrind/old_benchmark.txt"

      - name: Execute iai-callgrind_benchmark.sh
        run: |
          echo -n > table_output.txt
          bash .github/scripts/iai_callgrind_benchmark.sh > table_output.txt && cat table_output.txt

      - id: get_comment_body
        name: Get Comment Body
        run: |
          body="$(cat table_output.txt)"
          delimiter="$(openssl rand -hex 8)"
          echo "body<<$delimiter" >> $GITHUB_OUTPUT
          echo "$body" >> $GITHUB_OUTPUT     
          echo "$delimiter" >> $GITHUB_OUTPUT

      - name: Create Commit Comment
        uses: peter-evans/commit-comment@v3
        with:
          sha: ${{github.event.pull_request.head.sha}}
          body: ${{steps.get_comment_body.outputs.body}}
